// Code generated by Kitex v0.7.0. DO NOT EDIT.

package relationservice

import (
	"context"
	relation "douyin/kitex_gen/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFriendList":    kitex.NewMethodInfo(getFriendListHandler, newGetFriendListArgs, newGetFriendListResult, false),
		"GetFollowerList":  kitex.NewMethodInfo(getFollowerListHandler, newGetFollowerListArgs, newGetFollowerListResult, false),
		"GetFollowingList": kitex.NewMethodInfo(getFollowingListHandler, newGetFollowingListArgs, newGetFollowingListResult, false),
		"ChangeRelation":   kitex.NewMethodInfo(changeRelationHandler, newChangeRelationArgs, newChangeRelationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "relation",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendListArgs:
		success, err := handler.(relation.RelationService).GetFriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendListArgs() interface{} {
	return &GetFriendListArgs{}
}

func newGetFriendListResult() interface{} {
	return &GetFriendListResult{}
}

type GetFriendListArgs struct {
	Req *relation.DouyinRelationFriendListRequest
}

func (p *GetFriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendListArgs_Req_DEFAULT *relation.DouyinRelationFriendListRequest

func (p *GetFriendListArgs) GetReq() *relation.DouyinRelationFriendListRequest {
	if !p.IsSetReq() {
		return GetFriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFriendListResult struct {
	Success *relation.DouyinRelationFriendListResponse
}

var GetFriendListResult_Success_DEFAULT *relation.DouyinRelationFriendListResponse

func (p *GetFriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendListResult) GetSuccess() *relation.DouyinRelationFriendListResponse {
	if !p.IsSetSuccess() {
		return GetFriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFriendListResponse)
}

func (p *GetFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFriendListResult) GetResult() interface{} {
	return p.Success
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerListArgs:
		success, err := handler.(relation.RelationService).GetFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerListArgs() interface{} {
	return &GetFollowerListArgs{}
}

func newGetFollowerListResult() interface{} {
	return &GetFollowerListResult{}
}

type GetFollowerListArgs struct {
	Req *relation.DouyinRelationFollowerListRequest
}

func (p *GetFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerListArgs_Req_DEFAULT *relation.DouyinRelationFollowerListRequest

func (p *GetFollowerListArgs) GetReq() *relation.DouyinRelationFollowerListRequest {
	if !p.IsSetReq() {
		return GetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowerListResult struct {
	Success *relation.DouyinRelationFollowerListResponse
}

var GetFollowerListResult_Success_DEFAULT *relation.DouyinRelationFollowerListResponse

func (p *GetFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerListResult) GetSuccess() *relation.DouyinRelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFollowerListResponse)
}

func (p *GetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowerListResult) GetResult() interface{} {
	return p.Success
}

func getFollowingListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowingList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowingListArgs:
		success, err := handler.(relation.RelationService).GetFollowingList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowingListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowingListArgs() interface{} {
	return &GetFollowingListArgs{}
}

func newGetFollowingListResult() interface{} {
	return &GetFollowingListResult{}
}

type GetFollowingListArgs struct {
	Req *relation.DouyinRelationFollowListRequest
}

func (p *GetFollowingListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowingListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowingListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowingListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowingListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowingListArgs_Req_DEFAULT *relation.DouyinRelationFollowListRequest

func (p *GetFollowingListArgs) GetReq() *relation.DouyinRelationFollowListRequest {
	if !p.IsSetReq() {
		return GetFollowingListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowingListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowingListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowingListResult struct {
	Success *relation.DouyinRelationFollowListResponse
}

var GetFollowingListResult_Success_DEFAULT *relation.DouyinRelationFollowListResponse

func (p *GetFollowingListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowingListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowingListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowingListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowingListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowingListResult) GetSuccess() *relation.DouyinRelationFollowListResponse {
	if !p.IsSetSuccess() {
		return GetFollowingListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowingListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFollowListResponse)
}

func (p *GetFollowingListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowingListResult) GetResult() interface{} {
	return p.Success
}

func changeRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).ChangeRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ChangeRelationArgs:
		success, err := handler.(relation.RelationService).ChangeRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChangeRelationResult)
		realResult.Success = success
	}
	return nil
}
func newChangeRelationArgs() interface{} {
	return &ChangeRelationArgs{}
}

func newChangeRelationResult() interface{} {
	return &ChangeRelationResult{}
}

type ChangeRelationArgs struct {
	Req *relation.DouyinRelationActionRequest
}

func (p *ChangeRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChangeRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChangeRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChangeRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ChangeRelationArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChangeRelationArgs_Req_DEFAULT *relation.DouyinRelationActionRequest

func (p *ChangeRelationArgs) GetReq() *relation.DouyinRelationActionRequest {
	if !p.IsSetReq() {
		return ChangeRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChangeRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChangeRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ChangeRelationResult struct {
	Success *relation.DouyinRelationActionResponse
}

var ChangeRelationResult_Success_DEFAULT *relation.DouyinRelationActionResponse

func (p *ChangeRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChangeRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChangeRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChangeRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ChangeRelationResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChangeRelationResult) GetSuccess() *relation.DouyinRelationActionResponse {
	if !p.IsSetSuccess() {
		return ChangeRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChangeRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationActionResponse)
}

func (p *ChangeRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChangeRelationResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFriendList(ctx context.Context, Req *relation.DouyinRelationFriendListRequest) (r *relation.DouyinRelationFriendListResponse, err error) {
	var _args GetFriendListArgs
	_args.Req = Req
	var _result GetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, Req *relation.DouyinRelationFollowerListRequest) (r *relation.DouyinRelationFollowerListResponse, err error) {
	var _args GetFollowerListArgs
	_args.Req = Req
	var _result GetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowingList(ctx context.Context, Req *relation.DouyinRelationFollowListRequest) (r *relation.DouyinRelationFollowListResponse, err error) {
	var _args GetFollowingListArgs
	_args.Req = Req
	var _result GetFollowingListResult
	if err = p.c.Call(ctx, "GetFollowingList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeRelation(ctx context.Context, Req *relation.DouyinRelationActionRequest) (r *relation.DouyinRelationActionResponse, err error) {
	var _args ChangeRelationArgs
	_args.Req = Req
	var _result ChangeRelationResult
	if err = p.c.Call(ctx, "ChangeRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
