// Code generated by hertz generator.

package relationapi

import (
	"context"
	relationapi "douyin/biz/model/relationapi"
	"douyin/biz/rpc"
	"douyin/kitex_gen/relation"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
)

// GetFriendList .
// @router /douyin/relation/friend/list/ [GET]
func GetFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relationapi.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	clientResp, err := rpc.GetFriendsList(context.Background(), &relation.DouyinRelationFriendListRequest{UserId: req.UserId, Token: req.Token})
	if err != nil {
		log.Println(err.Error())
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := &relationapi.DouyinRelationFriendListResponse{StatusMsg: clientResp.StatusMsg, StatusCode: clientResp.StatusCode, UserList: ConvertFriendUsers(clientResp.UserList)}
	c.JSON(consts.StatusOK, resp)
}

// ChangeRelation .
// @router /douyin/relation/action/ [POST]
func ChangeRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relationapi.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	clientResp, err := rpc.ChangeRelation(context.Background(), &relation.DouyinRelationActionRequest{Token: req.Token, ToUserId: req.ToUserId, ActionType: req.ActionType})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := &relationapi.DouyinRelationActionResponse{StatusMsg: clientResp.StatusMsg, StatusCode: clientResp.StatusCode}

	c.JSON(consts.StatusOK, resp)
}

// GetFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func GetFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relationapi.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	clientResp, err := rpc.GetFollowerList(ctx, &relation.DouyinRelationFollowerListRequest{UserId: req.UserId, Token: req.Token})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := &relationapi.DouyinRelationFollowerListResponse{StatusMsg: clientResp.StatusMsg, StatusCode: clientResp.StatusCode, UserList: ConvertUsers(clientResp.UserList)}
	c.JSON(consts.StatusOK, resp)
}

// GetFollowingList .
// @router /douyin/relation/follow/list/ [GET]
func GetFollowingList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relationapi.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	clientResp, err := rpc.GetFollowingList(context.Background(), &relation.DouyinRelationFollowListRequest{UserId: req.UserId, Token: req.Token})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := &relationapi.DouyinRelationFollowListResponse{StatusMsg: clientResp.StatusMsg, StatusCode: clientResp.StatusCode, UserList: ConvertUsers(clientResp.UserList)}
	c.JSON(consts.StatusOK, resp)
}

func ConvertUsers(users []*relation.User) []*relationapi.User {
	convertedUsers := make([]*relationapi.User, 0, len(users))
	for _, u := range users {
		convertedUser := &relationapi.User{
			Id:              u.Id,
			Name:            u.Name,
			FollowCount:     u.FollowCount,
			FollowerCount:   u.FollowerCount,
			IsFollow:        u.IsFollow,
			Avatar:          u.Avatar,
			BackgroundImage: u.BackgroundImage,
			Signature:       u.Signature,
			TotalFavorited:  u.TotalFavorited,
			WorkCount:       u.WorkCount,
			FavoriteCount:   u.FavoriteCount,
		}
		convertedUsers = append(convertedUsers, convertedUser)
	}
	return convertedUsers
}

func ConvertFriendUsers(friendUsers []*relation.FriendUser) []*relationapi.FriendUser {
	convertedFriendUsers := make([]*relationapi.FriendUser, 0, len(friendUsers))
	for _, f := range friendUsers {
		convertedFriendUser := &relationapi.FriendUser{
			Id:              f.Id,
			Name:            f.Name,
			FollowCount:     f.FollowCount,
			FollowerCount:   f.FollowerCount,
			IsFollow:        f.IsFollow,
			Avatar:          f.Avatar,
			BackgroundImage: f.BackgroundImage,
			Signature:       f.Signature,
			TotalFavorited:  f.TotalFavorited,
			WorkCount:       f.WorkCount,
			FavoriteCount:   f.FavoriteCount,
			Message:         f.Message,
			MsgType:         f.MsgType,
		}
		convertedFriendUsers = append(convertedFriendUsers, convertedFriendUser)
	}
	return convertedFriendUsers
}
