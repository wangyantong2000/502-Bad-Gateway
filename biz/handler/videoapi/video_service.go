// Code generated by hertz generator.

package videoapi

import (
	"bytes"
	"context"
	videoapi "douyin/biz/model/videoapi"
	"douyin/biz/rpc"
	"douyin/kitex_gen/video"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"io"
	"log"
	"net/http"
)

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoapi.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	res, err := rpc.Feed(context.Background(), &video.DouyinFeedRequest{
		LatestTime: req.LatestTime,
		Token:      req.Token,
	})
	if err != nil {
		log.Printf(err.Error())
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := &video.DouyinFeedResponse{
		StatusCode: res.StatusCode,
		StatusMsg:  res.StatusMsg,
		VideoList:  res.VideoList,
		NextTime:   res.NextTime,
	}
	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	data, _ := c.FormFile("data")
	src, err := data.Open()
	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, src); err != nil {
		log.Printf(err.Error())
		c.JSON(http.StatusBadRequest, &video.DouyinPublishActionResponse{
			StatusCode: -1,
			StatusMsg:  "上传失败",
		})
		return
	}
	res, err := rpc.PublishAction(context.Background(), &video.DouyinPublishActionRequest{
		Token: c.PostForm("token"),
		Data:  buf.Bytes(),
		Title: c.PostForm("title"),
	})
	if err != nil {
		log.Printf(err.Error())
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := &video.DouyinPublishActionResponse{
		StatusCode: res.StatusCode,
		StatusMsg:  res.StatusMsg,
	}
	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoapi.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	res, err := rpc.PublishList(context.Background(), &video.DouyinPublishListRequest{
		UserId: req.UserId,
		Token:  req.Token,
	})
	if err != nil {
		log.Printf(err.Error())
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := &video.DouyinPublishListResponse{
		StatusCode: res.StatusCode,
		StatusMsg:  res.StatusMsg,
		VideoList:  res.VideoList,
	}
	c.JSON(consts.StatusOK, resp)
}
